#include <iostream>
#include <math.h>
#include <algorithm>
#include <vector>
using namespace std;

class Neuron {
private:
public:
    double w = 2.0;
    vector <double> x;
    Neuron(int number,float b,int size_w,float c){          // конструктор, где number-количество входов, b-значения входов, size_w-количество коэффициентов, c-значения коэффициентов
      vector <float> x(number,b);
      vector <float> weight(size_w,c);
      getActSigm(getActIdenity(x,weight));
      cout << "Выходное значение:" << getActSigm(getActIdenity(x,weight)) << endl;
                                                 }

    float getActIdenity(vector <float> x, vector <float> weight) {
           float sum = 0;
    for (int i = 0; i < x.size(); i++) {
        sum += x[i] * weight[i];
                                       }
         return sum;
                                                                 }

    float getActSigm(float x) {
         return exp(x)/(1 + exp(x));
                              }


    double getActTigh(float x) {
          return (exp(2*x) - 1) / (exp(2*x) + 1);
                               }


};

 main() {
 setlocale(0,"");
 Neuron go_neuron(3,-0.1,3,0.2);                      // 3 входа по -0.1 значению каждый, 3 весовых коэффициента по 0.2 значению каждый
 Neuron go_neuron1(0,0,0,0);                         // 0 входов и 0 коэффициентов
 Neuron go_neuron2(2,2,3,4);                         // 2 входа по 2 значения каждый, 3 коэффициента по 4 значения каждый (лишний коэффициент автоматически отбрасывается)
     return 0;
            }

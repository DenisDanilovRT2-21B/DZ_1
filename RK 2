#include <iostream>
#include <math.h>
#include <algorithm>
#include <vector>
using namespace std;

class Neuron {
private:
    float result;
public:
    vector <float> x;
    vector <float> weight;
    Neuron(int number,float b,int size_w,float c){          // конструктор, где number-количество входов, b-значения входов, size_w-количество коэффициентов, c-значения коэффициентов
      if ((number < 0) || (size_w < 0)) {
        cout << "Ошибка" << endl;
                                        }
      else {
      vector <float> x1(number,b);
      vector <float> weight1(size_w,c);
      getActSigm(getActIdenity(x1,weight1));
      x = x1;
      weight = weight1;
      cout << "Выходное значение:" << getActSigm(getActIdenity(x1,weight1)) << endl;
      result = getActSigm(getActIdenity(x1,weight1));
           }
                                                 }
     ~Neuron() {
       vector <float>().swap(x);
       vector <float>().swap(weight);
               }
     Neuron& operator= (const Neuron &another) {
     if (this == &another) {
        return *this;
                           }
      else {
      x = another.x;
        return *this;
           }
                                              }

    float getActIdenity(vector <float> x, vector <float> weight) {
           float sum = 0;
    for (int i = 0; i < x.size(); i++) {
        sum += x[i] * weight[i];
                                       }
         return sum;
                                                                 }

    float getActSigm(float x) {
         return exp(x)/(1 + exp(x));
                              }


    double getActTigh(float x) {
          return (exp(2*x) - 1) / (exp(2*x) + 1);
                               }

    void ShowOutput() {
          cout << "Выходное значение:" << result << endl;
                      }
    void ChangeInput(int j, float valueInput) {
    if (((j - 1) > x.size()) || (j < 0)) {
        cout << "Ошибка" << endl;
                                         }
        else {
      x[j - 1] = valueInput;
             }
                                              }
    void ChangeWeight(int k, float valueWeight) {
     if (((k - 1) > weight.size()) || (k < 0)) {
        cout << "Ошибка" << endl;
                                               }
     else {
      weight[k - 1] = valueWeight;
          }
                                                }
    float CalculateChanged() {
    getActSigm(getActIdenity(x,weight));
    result = getActSigm(getActIdenity(x,weight));
    return result;
                             }



};

 main()    {
 setlocale(0,"");
 Neuron go_neuron(3,-0.1,3,0.2);                          // 3 входа по -0.1 значению каждый, 3 весовых коэффициента по 0.2 значению каждый
 go_neuron.ShowOutput();
 go_neuron.ChangeInput(1,1);                              // меняем значение первого входа на 1
 go_neuron.ChangeWeight(2,0.1);                           // меняем значение второго весового коэффициента на 0.1
 go_neuron.CalculateChanged();
 go_neuron.ShowOutput();
 Neuron go_neuron1(0,0,0,0);                         // 0 входов и ноль коэффициентов
 Neuron go_neuron2(2,2,3,4);                         // 2 входа по 2 значения каждый, 3 коэффициента по 4 значения каждый (лишний коэффициент автоматически отбрасывается)
 Neuron go_neuron3(-2,1,4,0.6);
 go_neuron2 = go_neuron1;
 go_neuron2.CalculateChanged();
 go_neuron2.ShowOutput();
     return 0;
            }
